// Promise

/* Особливий об'єкт, який використовується для асинхронних обчислень
 Дає можливість "підписуватись" на зміни в асинхронних процесах та узгоджувати асинхронні дії, дає можливість уникнути "callback hell"
 Проміс має стан, який може бути 1 з 3:
 - pending (очікування, обробка) 
або
    - fullfiled (success) - успішне завершення асинхронної дії
або 
    - rejected (error) - неуспішне виконання асинхронної дії. Необроблена (або другим коллбеком then, або catch) помилка у промісі вивалюється як Uncaught (in promise) error

    Стан може бути тільки один в 1 момент часу. Після набуття другого статусу (fullfiled/rejected) більше ніякої зміни статусу не станеться


Проміс може отримати коллбеки для обробки результату за допомогою метода then

*/

new Promise(function(resolve, reject) {
    // в разі успішно виконаної роботи викликаємо resolve()
    // проміс розуміє, що в нього статус fullfiled і коллбеку передається інформація (дані проміса)

    // в разі неуспішного виконання роботи або помилки - викликаємо reject()
    // проміс розуміє, що у нього статус rejected і передає коллбеку інфу
})

/*
.then(function resolve(data){
    // ось тут в data доступні дані проміса
}, function reject(error){
    // ось тут в error доступні дані проміса
})


Або:

.then(function resolve(data){
    // ось тут в data доступні дані проміса
})
.catch(function reject(error){
    // ось тут в error доступні дані проміса
})

*/